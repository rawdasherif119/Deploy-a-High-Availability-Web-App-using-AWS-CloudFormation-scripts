Description: >
    Udagram Project /Server infrastructure code

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:
    
    # Load Balancer Security Group
    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name 
            Value: !Sub ${EnvironmentName} LoadBalancerSecurityGroup

    # Web Server Security Group
    WebServerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our host and SSH from local host only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name 
            Value: !Sub ${EnvironmentName} WebServerSecurityGroup   

  # Profile Instance 
  ProfileInstanceWithRole:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: S3ReadOnlyEC2        

    # Web Application Launch Configuration
    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install apache2 -y
            sudo systemctl start apache2.service  
            cd /var/www/html
            sudo aws s3 cp s3://cloudformationUdagram/index.html .   
            sudo systemctl start apache2.service     
        ImageId: ami-0e472ba40eb589f49
        IamInstanceProfile: !Ref ProfileInstanceWithRole
        SecurityGroups:
        - Ref: WebServerSecurityGroup
        InstanceType: t3.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'   

    # Web Application Group
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue: 
              !Sub "${EnvironmentName}-PRIVATE-NETS"
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: '4'
          MaxSize: '8'
          TargetGroupARNs:
          - Ref: TargetGroup  

    # Target Group
    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"   
    # Load Balancer
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC1-SUBNET"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC2-SUBNET"
        SecurityGroups:
        - Ref: LoadBalancerSecurityGroup  
    # Listener
    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
        LoadBalancerArn:
          Ref: LoadBalancer
        Port: '80'
        Protocol: HTTP 

    #Load Balancer Listener Rule    
    ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1   

Outputs:
  LoadBalancerURL:
    Description: Load Balancer URL
    Value: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-DNS-NAME                                  